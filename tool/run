#/bin/bash
# This script will run the deSQLer on the given test benchmark

usage() { echo "Usage: $0 [-t <bench|test>] [-f <file>] [-c <ser|es>] [-s <int>] [-a <auto:int>]" 1>&2; exit 1; }

while getopts ":t:f:c:s:a:" o; do
    case "${o}" in
        t)
            t=${OPTARG}
            ;;
        f)
            f=${OPTARG}
            ;;
        c)
            c=${OPTARG}
            ;;
        s)
            s=${OPTARG}
            ;;
				a)  
						a=${OPTARG}
						;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))
# screen the input args
echo ">> ${t}"
echo ">> ${f}"
echo ">> correctness criterion = ${c}"
echo ">> maximum cycle length = ${s}"
echo '-------------------------------'


if [ -z "$a" ]; then
	# update the config file
	rm src/desqler/constants.*
	if [ $c == 'ser' ]; then
		sed  "s/corr/SERIALIZABILITY/" src/desqler/constants_template.ml  > src/desqler/constants.ml 
	else
		sed  "s/corr/EVENTUAL_SERIALIZABILITY/" src/desqler/constants_template.ml  > src/desqler/constants.ml
	fi
	sed -i '' "s/cl/$s/" src/desqler/constants.ml 

	# compile the tool
	cd src 
	make localclean
	make world 
	cd ../ 
	
	# run the tool on the requested file
	./bin/deSQLer.opt -w -20 -c ./$t/$f/$f.ml 

	# run z3 on the generated file
	time z3 z3-encoding.smt2 > z3.output
	cat z3.output
else
	iter=$(($a + 2))
	for i in $( eval echo {3..$iter} )
	do
		# update the config file
		rm src/desqler/constants.*
		if [ $c == 'ser' ]; then
			sed  "s/corr/SERIALIZABILITY/" src/desqler/constants_template.ml  > src/desqler/constants.ml 
		else
			sed  "s/corr/EVENTUAL_SERIALIZABILITY/" src/desqler/constants_template.ml  > src/desqler/constants.ml
		fi
		sed -i '' "s/cl/$s/" src/desqler/constants.ml 
		tr '\n' '^' < src/desqler/constants.ml | sed "s/EC/SER/$i" | tr '^' '\n'
	done
fi











