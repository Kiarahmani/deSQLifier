(declare-sort Table)
(declare-sort St)
(declare-sort Id)
(declare-sort Rec)
(declare-sort Str)
(declare-fun user_account () Table)
(declare-fun G_s (St St) Bool)
(declare-fun G_d (St St) Bool)
(declare-fun G_w (St St) Bool)
(declare-fun R (St St) Bool)
(declare-fun IIr (St St St) Bool)
(declare-fun Rl (St St St) Bool)
(declare-fun IIc (St St St) Bool)
(declare-fun Rc (St St St) Bool)
(declare-fun id (Rec) Id)
(declare-fun in (St Rec) Bool)
(declare-fun sbal (Rec) Int)
(declare-fun cbal (Rec) Int)
(declare-fun name (Rec) Str)
(declare-fun table (Rec) Table)
(declare-fun S0 (St St Id Int Rec) Bool)
(declare-fun I (St) Bool)
(declare-fun stgP () St)
(declare-fun stgQ () St)
(declare-fun stl () St)
(declare-fun u_id () Id)
(assert (forall ((bv0 Table)) (= bv0 user_account)))
(assert (forall ((bv0 St) (bv1 St))
  (= (R bv0 bv1) (or (G_w bv0 bv1) (G_d bv0 bv1) (G_s bv0 bv1)))))
(assert (forall ((bv0 St) (bv1 St) (bv2 St))
  (= (Rl bv0 bv1 bv2) (and (R bv1 bv2) (IIr bv0 bv1 bv2)))))
(assert (forall ((bv0 St) (bv1 St) (bv2 St))
  (= (Rc bv0 bv1 bv2) (and (R bv1 bv2) (IIc bv0 bv1 bv2)))))
(assert (forall ((bv0 St) (bv1 Rec) (bv2 Rec))
  (let ((a!1 (or (= bv1 bv2) (not (= (id bv1) (id bv2))))))
    (=> (and (in bv0 bv1) (in bv0 bv2)) a!1))))
(assert (forall ((bv0 Rec) (bv1 Rec))
  (=> (and (= (id bv0) (id bv1))
           (= (table bv0) (table bv1))
           (= (id bv0) (id bv1))
           (= (name bv0) (name bv1))
           (= (cbal bv0) (cbal bv1))
           (= (sbal bv0) (sbal bv1)))
      (= bv0 bv1))))
(assert true)
(assert (forall ((bv0 St) (bv1 St))
  (let ((a!1 (exists ((bv2 Id) (bv3 Int))
               (let ((a!1 (forall ((bv5 Rec))
                            (=> (in bv0 bv5)
                                (exists ((bv4 Rec))
                                  (let ((a!1 (and (= (id bv4) (id bv5))
                                                  (= (name bv4) (name bv5))
                                                  (= (sbal bv4) (sbal bv5))
                                                  (= (table bv4) (table bv5))
                                                  (= (cbal bv4)
                                                     (- (cbal bv5) bv3)))))
                                  (let ((a!2 (ite (and (= (id bv5) bv2)
                                                       (>= (cbal bv5) bv3))
                                                  a!1
                                                  (= bv4 bv5))))
                                    (and a!2 (S0 bv0 bv1 bv2 bv3 bv4))))))))
                     (a!2 (forall ((bv4 Rec))
                            (=> (S0 bv0 bv1 bv2 bv3 bv4)
                                (exists ((bv5 Rec))
                                  (let ((a!1 (and (= (id bv4) (id bv5))
                                                  (= (name bv4) (name bv5))
                                                  (= (sbal bv4) (sbal bv5))
                                                  (= (table bv4) (table bv5))
                                                  (= (cbal bv4)
                                                     (- (cbal bv5) bv3)))))
                                  (let ((a!2 (ite (and (= (id bv5) bv2)
                                                       (>= (cbal bv5) bv3))
                                                  a!1
                                                  (= bv4 bv5))))
                                    (and (in bv0 bv5) a!2))))))))
                 (and a!1
                      a!2
                      (forall ((bv6 Rec))
                        (= (in bv1 bv6) (S0 bv0 bv1 bv2 bv3 bv6))))))))
    (= (G_w bv0 bv1) a!1))))
(assert (forall ((bv0 St) (bv1 St))
  (= (G_d bv0 bv1) (forall ((bv2 Rec)) (= (in bv1 bv2) (in bv0 bv2))))))
(assert (forall ((bv0 St) (bv1 St))
  (= (G_s bv0 bv1) (forall ((bv2 Rec)) (= (in bv1 bv2) (in bv0 bv2))))))
(assert (forall ((bv0 St))
  (let ((a!1 (forall ((bv1 Rec))
               (=> (in bv0 bv1) (and (>= (cbal bv1) 0) (>= (sbal bv1) 0))))))
    (= (I bv0) a!1))))
(assert (forall ((bv0 St) (bv1 St) (bv2 St))
  (let ((a!1 (forall ((bv3 Rec) (bv4 Rec))
               (=> (and (in bv0 bv4) (in bv1 bv3) (= (id bv3) (id bv4)))
                   (in bv2 bv3)))))
    (= (IIr bv0 bv1 bv2) a!1))))
(assert (forall ((bv0 St) (bv1 St) (bv2 St))
  (let ((a!1 (forall ((bv3 Rec) (bv4 Rec))
               (=> (and (in bv0 bv4) (in bv1 bv3) (= (id bv3) (id bv4)))
                   (in bv2 bv3)))))
    (= (IIc bv0 bv1 bv2) a!1))))
(assert (I stgP))
(assert (I stgQ))
(assert (forall ((bv0 Rec)) (= (in stl bv0) false)))
(assert (Rl stl stgP stgQ))
(assert (not (forall ((bv0 Rec))
       (let ((a!1 (exists ((bv1 Rec))
                    (and (in stgP bv1)
                         (= (table bv1) user_account)
                         (= (id bv1) u_id)
                         (= bv0 bv1))))
             (a!2 (exists ((bv2 Rec))
                    (and (in stgQ bv2)
                         (= (table bv2) user_account)
                         (= (id bv2) u_id)
                         (= bv0 bv2)))))
         (= a!1 a!2)))))
(check-sat)
(get-model)
